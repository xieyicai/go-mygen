// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package main generated by go-bindata.// sources:
// assets/tpl/curd.tpl
// assets/tpl/curd2.tpl
// assets/tpl/entity.tpl
// assets/tpl/example.tpl
// assets/tpl/init.tpl
// assets/tpl/markdown.tpl
// assets/tpl/tables.tpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsTplCurdTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x6f\x6f\xdb\xc6\x19\x7f\xcd\x00\xf9\x0e\x4f\x88\xcc\x20\x13\x85\x4a\x86\x61\x2f\xbc\xb2\x83\x23\xc9\xad\x30\xc7\xf6\x2c\x65\xc5\xe0\x1a\x01\x2d\x9e\x1c\xc6\x14\xa9\x1c\x4f\xfe\x03\x41\x80\x9b\x7a\x70\x12\x24\x4e\x96\xc6\x6e\xe1\x66\x69\x9d\x39\x45\xdf\x38\x71\xb1\xac\x4d\x5d\xb4\xfd\x30\xb3\x68\xe7\x5b\x0c\xf7\x4f\xa2\x2c\x4a\xa1\xd2\x6c\xd5\x2b\xf1\x78\x77\xbf\xe7\xf9\x3d\x7f\xef\x58\xaf\x9f\x83\xd3\x4e\x50\xc4\x08\xc1\xb0\x09\xe7\xa1\xd1\x38\x79\x82\x0e\x62\xcb\x9b\x43\x70\xfa\x5a\x0a\x4e\x63\x7f\x91\xbe\x33\x46\x1d\xe4\xda\x01\x9d\xa0\xd0\x19\x4e\x19\xd0\x75\xf6\xd6\x18\xb7\x2a\x08\xd4\x49\x0b\x23\x8f\xe4\x6d\x95\x4e\x01\xf1\x8b\x02\x98\x60\xd9\x76\xeb\xe9\x02\xc8\x79\x74\x0e\x72\x03\xd4\xbd\x65\xc1\xc7\xe4\xcd\xb6\xf3\x6c\xa9\x09\xf2\x6c\x38\x47\x1f\x4e\x9e\x28\xf9\x5e\x40\xa0\x68\xcd\xba\xa8\x5e\x37\x0a\x04\xd7\x4a\x84\x3d\x51\xb4\x46\x03\x4c\x50\xeb\x75\x23\x32\xa2\xd2\x55\x72\x28\xe3\x57\x2a\xc8\x23\x74\x2b\xb2\x5c\x45\x10\xbb\x45\xc0\x46\xa0\xde\xc5\xa2\x43\x50\xa5\x9b\x46\x36\x6c\xf0\xb5\x0a\x93\x9d\x8f\x14\x97\xab\x74\x44\x3e\x8e\xfa\xb8\x62\x11\xb9\x52\x69\x8d\x4f\xa1\x8a\x85\xe7\x23\x9a\xca\xbf\x4e\x19\x28\xb0\xe0\xe6\xb7\x0c\x2d\x73\xd5\x71\x6d\x8c\x3c\x06\xd3\x2d\xfa\x98\x13\x10\x49\x33\xa4\xd3\xd0\xdc\xbd\x7f\x74\xfb\xc6\xe1\x8d\xef\x4f\x9e\x50\x0a\xc8\x45\x25\x82\x6c\x00\x98\xf5\x7d\x17\xfa\xfd\xd2\x69\x08\x3f\x7b\xde\xbc\xff\x55\x73\x67\xf5\x60\x7f\xfd\xd5\xca\xad\x83\x97\xbb\x87\xb7\xbf\x0d\x57\x3e\xea\x10\xb3\x11\xcb\x2d\x8c\xd7\x5c\x17\x72\x1e\x71\xc8\x72\x9b\x67\x3a\xd8\x9f\xeb\x3e\xfe\x4a\xd9\x92\x2e\x15\x79\xaa\xb9\xae\x60\x59\x01\x31\x16\xa5\x93\x49\xc9\x64\x2c\xd7\xbc\x12\x68\x74\xd7\x33\xbd\x44\xd1\xa1\xe8\xc7\x71\xaa\xe9\x6c\x4d\xb7\xe8\xf5\x93\x27\x14\x8c\x48\x0d\x7b\x30\x14\x37\xa1\x2e\x82\x6c\xa0\x30\xa4\xea\x80\x5a\x76\x7d\x8b\xfc\xfe\x77\x2c\x6c\x94\x4e\xdd\x87\x15\xfa\xbf\x63\xc8\x18\xe5\xd3\x53\x4a\x17\x07\x4a\x5c\x5c\x46\x30\x06\x42\x18\x6c\x7f\xc7\x1b\x40\x83\xbc\x37\xb0\xfc\x8e\x97\x58\xfa\xbc\x37\xa0\xec\xc4\xa9\x20\xa3\xe8\x54\x50\x3c\x02\x7d\xa3\x75\xc3\xd0\x61\x7d\x30\xa0\xb7\x8f\x91\x90\x92\x02\xc1\x8e\x37\xd7\x73\x23\x1e\xde\x1d\xff\x65\xb8\xf7\xcc\x9b\x97\x7c\x1b\xb9\x91\x80\x56\xb2\x17\xe1\xcc\x9c\x8f\x2b\x46\xf6\xa2\x58\xcb\xc2\x70\x1c\x2d\xc6\xc6\x99\x3d\x0b\x86\x61\xc8\x15\x3a\x68\xb1\x61\xc7\x50\x52\x80\x30\xf6\xb1\xce\x60\x9c\x32\xb8\xc8\xd3\xec\x59\x1d\xde\x85\xf3\x6c\xa8\x6f\x5c\xb2\x1d\xd8\x2c\x25\x7b\x71\x18\xec\xd9\xe9\xf3\x33\x29\xfa\xd8\x48\x81\xe7\xb8\x5c\x55\xba\x6b\xc9\xf7\x3c\x86\x44\x63\xb6\xe4\x7b\x65\x23\x8b\xca\x56\xcd\x25\x19\xfa\xff\x3d\x44\xb2\xb3\x5a\xd9\x72\x03\xa4\xff\x81\xce\x3a\x65\x7a\x8e\xdb\x01\xef\x39\x5c\x52\xba\x25\xb5\xcd\xa0\xa2\x31\x01\x8e\x4b\xc6\x88\x4c\xa7\xe1\x68\xfd\xbb\xe6\xbd\xcd\xf0\xd6\x4a\xf8\xe8\xd6\xe1\xd6\xea\xd1\xf6\xd7\xcd\xdd\x4f\xc3\x67\xff\x96\xc9\xae\x12\x9f\xb6\x18\x84\x0e\x73\x88\x64\x7c\xb7\x56\xf1\x02\x4d\xa7\x36\x73\xbc\xb9\x68\x42\x53\xa9\x85\x47\x5c\x97\x25\x2a\x5a\x55\x1a\x0d\x50\x8f\x63\x37\x77\xb6\x8e\xb6\xef\x84\x1b\x7b\xe1\xdd\x67\x46\x62\xd8\x29\x7f\x31\xd0\x82\xeb\x6e\x71\x89\x08\xe0\x14\x54\x2d\x6c\x55\x02\x6a\x7e\xc7\x23\x08\x97\xad\x12\xaa\x37\x74\x96\xb0\x83\x29\x14\xd4\x5c\x02\xd3\x33\xb1\xfb\x72\xfb\x44\xbc\xe1\x7a\x0d\xe1\xe5\x96\xd5\xa8\x27\x19\xd9\x8b\x9a\x6e\xfc\x99\x8e\x0b\x5c\x09\x68\x18\x86\xce\x4d\x4d\xa7\x9f\x32\xe1\x98\x01\x85\x2b\xd8\xa8\x8c\x30\x50\xf5\x34\x8e\x21\x56\x0c\x9b\x0c\xcc\xc8\xb8\x7e\x80\xb4\x2e\x27\x50\xca\x15\x62\x4c\x62\xc7\x23\x65\x4d\x7d\xb5\x76\x3b\x7c\xf8\x13\xe7\xaa\xb9\xff\xc9\xd1\xcf\x8f\xc3\xf5\xa7\xcd\x9d\x6f\x8e\x5e\x3c\xfd\xcf\xca\x8d\xdf\x2c\x7c\x88\x3f\xf4\x54\x26\xb6\xce\x0c\x4e\xa1\x35\xfa\xb7\xec\x63\xe0\x30\xe3\x68\x89\x48\x01\x44\x21\xe9\x55\xcb\xea\x2c\x09\x50\xa5\x4c\xb1\xb8\x50\xb2\x3c\x8d\x67\x06\x5e\x8f\xd8\x42\x5e\x87\xf2\x5e\xd9\x6f\x34\x86\x78\x92\x30\xde\xaf\x55\xaa\x82\xdb\x74\x9a\x22\x44\x7a\x26\xba\x9c\xe5\x03\x5d\xb0\x40\x95\x3d\x65\x32\xfa\xba\x75\x0e\xbf\x78\x7a\xf4\xfc\x49\x6f\x25\x95\x92\xef\x11\xc7\xab\x21\xa9\xb1\x12\xb1\xb7\x09\x56\xb5\x8a\x3c\x3b\xe2\x03\x29\x60\x89\xb3\x47\x95\xd6\x85\xb5\xa4\xe9\x8e\xf9\xea\xdd\x8d\x96\xaf\x0e\xe2\xaa\xcc\x63\x50\x32\x57\x15\x92\x0f\xe0\xa7\x31\x2e\x1a\xc1\x3c\xe6\xa6\x49\x6c\x1e\x67\xf2\x5f\x66\xf1\x88\xc1\xdb\x71\x12\x5c\x77\x8d\x1c\xc6\xe3\x3e\x0d\x66\x6e\xf9\x41\x0c\xdf\x11\x5d\x6d\xe2\xcc\xbe\xf6\x8d\x31\xed\x95\xf0\xf3\x17\xe1\xe6\xde\x20\x56\x2d\x58\x0b\xe8\x78\xf6\x59\xb0\xdc\x1a\xea\xb6\xe8\x2c\xeb\x93\xbb\x0c\x17\x90\x0a\x89\xc9\x2f\x93\x18\x55\x2d\x2c\xf7\xd6\xfb\xa6\x0d\xba\xc5\xff\x36\x6b\x60\x11\x30\x42\x4c\x06\x98\x5b\x42\x25\x8d\xe9\x9a\x30\xef\x2d\x58\x18\xac\x72\x19\x95\x48\xc6\xaf\x79\x04\x58\x47\x77\xf2\x84\x12\x19\xe3\x08\x26\x70\x3c\x83\xba\xc3\x08\x7b\x8b\x6c\x2d\x09\xc4\x2c\x8d\xf3\x08\xc4\xbb\x70\x3e\xc6\xce\xe1\xe6\x5e\xf3\xc9\xe3\x83\x9f\xb7\xc3\x8f\x9e\x27\x33\x73\x06\x23\x8b\x20\xae\x6d\xfc\x44\x9d\xdb\x94\xc9\xc4\xcf\x94\x32\xd2\x4d\x50\xf3\xe3\x85\xdc\x54\x11\xf2\xe3\xc5\x09\x50\xe1\x6c\x9f\xe3\xe6\x59\x50\x41\xab\xd7\x8d\xbc\x17\x20\x4c\x22\xe5\x52\x87\xbf\x8c\x8c\x5d\xce\x15\x22\x6f\x2f\xb1\x16\x4b\x57\x93\x39\x11\xe2\x5e\xd4\x93\x41\xd9\x58\xfc\xca\x9e\x76\x45\xba\x40\xdb\xc7\xa2\x39\x87\x6b\xce\xf3\x0d\xf7\xbd\x37\x4a\x38\xbd\x75\x6f\xb7\x5a\x11\x7f\x19\x38\x2d\x5c\xae\xda\xaf\xf5\x97\x9e\x09\x41\xf8\xcd\xb0\x09\xea\xe5\xc9\xec\x48\x31\x97\xc0\x67\x0a\xb9\x22\x55\x9c\xe3\x46\xbb\xac\x0f\xde\xcf\x4d\xe5\xe8\xab\x49\xec\x54\x2c\xbc\xfc\x27\xb4\xcc\x6e\x35\xfe\x48\xdd\x46\x14\x1f\xea\x33\xd6\x3c\xd2\xa6\x67\x22\x19\x2b\x05\xe7\xf5\x08\xf3\xa7\x9d\x14\x9c\x5e\xb0\x5c\x76\xde\xe4\x30\x14\x81\x41\x35\x1a\x62\xa3\x56\x91\xe5\xcf\x29\x7a\x88\x5e\xb0\x5c\xce\xbe\x30\x44\x9b\xe3\x8a\xd1\xca\x9e\x5d\xd5\xa9\x45\xbd\x48\xfd\x5b\x03\x56\xdb\x11\xd7\xd5\x68\x15\x45\x01\xbb\xc3\x48\xda\xed\x45\xb9\x2f\xe4\xc6\x72\x99\x22\xa5\xbe\x62\x74\xb4\xb7\x67\x41\x1d\x9d\x9a\xb8\xd4\xdf\x2a\x3c\x69\x52\x70\xe9\xd0\x6c\x97\x56\xb7\x2a\xc2\xf1\x6d\x75\x17\xa3\x0e\x0e\x88\xd0\x38\x79\xd3\xf0\xf6\xd4\x65\x4e\x38\x96\xbf\x94\x2f\xc2\x05\xf5\x58\xc1\x68\xab\x9e\x28\x11\xf5\xed\xbb\xc2\x47\x2b\xcd\xfb\xeb\x07\x2f\x57\x06\xe4\x67\xcc\xfa\xf5\xe9\x99\x98\xca\xe6\xa6\xe0\xe2\x5f\x21\x9f\x85\x6c\xae\x90\xf9\x7f\xf0\xc5\x69\x4a\x58\xe4\x68\xc9\xa4\x24\x95\xda\xe5\x39\x01\x27\x90\x99\xb8\x3c\x5e\xd4\xce\xe8\x90\x28\x2a\x12\x34\xaa\x7a\x5c\xe7\x39\xc4\xa4\x7a\x13\x26\x9a\x37\x77\xc2\xcd\x5d\x71\x01\xb9\xfb\x59\xf3\xd1\xd7\xc9\xf8\xc8\x2d\x39\x01\x09\x34\xc7\xe6\x54\x24\xcb\xd8\x83\x73\xc2\x7c\x63\xf1\x2a\xc2\x08\x1c\x5b\x66\xe6\x44\xed\xbc\x63\xeb\xa2\xad\x2a\x75\x34\x54\xbf\x80\x3b\x76\x4d\x21\x3a\x27\xfe\x9a\xb6\x54\x04\xf3\x43\x55\x5f\x9a\xc3\x3b\xb7\xc2\x3b\x6b\xcd\x67\x5b\x87\x5b\xab\xe1\x3f\xb6\x0f\x7e\xf8\x56\x24\xef\x9b\x9f\x1e\x6d\x27\xa4\x7c\xd4\xf1\x6c\x8d\x73\xd1\xab\x6a\x0e\x9a\xd2\x19\x81\x39\xfa\x6c\xf2\x3b\x0f\x36\xf0\x01\xc5\xe0\x48\xba\xc1\x50\x87\xc4\xc6\xba\x31\x81\x6d\x84\x35\xf5\x78\xcd\xb4\x51\x50\x52\xdb\xae\xd9\xde\xb7\x93\x8b\x7a\xfd\x1c\xa4\xcf\xc0\xe1\xc3\x2f\xc2\x9b\xf7\xc3\x2f\xff\x7e\xf8\xc3\x27\xe1\xe3\xd5\xc3\xad\xd5\x83\x97\x2b\x07\xfb\x9f\x37\xd7\x7e\x0c\x37\xf6\xe0\x4c\x9a\x5f\x29\xc7\xdd\xca\x27\x21\xea\x3d\x44\xe8\x82\x7e\x5c\xa5\x20\xf0\x31\x11\x1e\x5b\xba\x8a\x4a\xf3\xc8\x36\x0c\x43\x1c\x53\x7a\xdd\x87\x75\x5c\x85\x51\xd7\x92\x7c\xf7\xfa\x3e\xd0\x41\x31\x98\x90\x8c\xe4\x76\x17\x20\x46\x8c\xa2\xcf\x14\xa2\x32\x47\xc5\xd5\x53\x1d\x4c\xf7\xbf\x32\xec\xe7\x18\x32\x19\x3c\x7b\x7c\xb8\xbe\x47\x51\x8c\xbc\x6c\x76\x68\x6b\x7a\xef\x9f\xb4\xee\xfe\xed\xe3\xc3\x17\x5f\x86\x1b\x7b\xaf\xd6\xee\x85\x9b\xdf\x87\xff\xda\x90\xd6\x70\xfb\x51\xa0\xc3\x18\xf2\x34\x9d\xc6\x5f\xf4\xd2\xcb\x45\x1e\x5b\xc7\xdb\x99\xbe\xd8\xe1\xf3\x87\x47\x3f\x7d\x2c\xe0\x07\x03\x0e\x02\xcd\x49\xc1\x35\x0a\xae\xf3\x2f\x31\xf2\x12\xd3\x09\xc8\xb4\x33\x63\x14\xa8\x17\x98\x26\x7f\xbe\x26\x9e\xa3\xcd\xaf\x9c\x98\xb7\xe1\x9d\xd6\xac\xbc\x0d\x3c\xa6\xf3\xd9\xe6\xdd\xb5\xe6\xfe\xbd\xb8\x4b\xc7\x0e\x88\x77\x3a\x10\x5a\x97\x8b\x7d\xf5\x3e\xd8\xdf\x09\xef\x3e\x79\x03\xbd\x0b\x8b\x56\x35\xa2\x37\x15\x4a\x08\x93\x92\x62\x40\x4b\xe5\x94\x14\x54\x08\x14\x7e\xf7\x4d\x73\xff\xab\x70\xfd\x01\x53\x2b\x11\x5e\x16\xa1\x2a\x55\x4b\xd3\x59\xc2\xa7\xaa\xb0\x47\x61\x5f\x76\xad\x76\x85\x5d\x28\xd1\xa4\xcd\x5b\x66\xbe\xa5\x38\x3e\x61\x7f\xd1\x90\x5f\xdb\xa2\x87\xa6\xe8\xb8\xd1\x46\x51\x94\x74\xfa\xd5\xca\x83\xe6\x8f\x0f\x5a\xc7\x23\x26\x7c\x22\x61\x8b\xfe\x25\xab\xaa\xe9\x50\xb1\xaa\xd3\x3c\xda\xe3\x43\x82\xe7\x47\xab\x7a\xa1\x75\x02\x78\xdd\x0a\xa9\xaa\xe3\xd9\x68\xa9\xa7\xba\x74\xcb\x69\xaa\x58\xde\x6e\x59\x81\xad\x98\xe9\x3c\x64\xd1\x79\xd1\x9b\xfc\xd7\xeb\xd5\x4a\x11\xbd\xd3\x5a\x9f\x8f\x6b\xbe\x4f\x86\xcd\xf8\x6f\x6b\xf2\x7e\xa2\xca\x3e\x58\xc7\x6f\x22\xa6\x20\xd6\x16\x30\x01\x64\xf5\x15\xe0\x11\x36\x5d\x9e\xd2\x98\x1d\x04\x67\xf3\x29\x58\x68\xb3\xc5\x26\xf2\x9b\x2e\xee\x3a\x25\x90\xaf\x84\x52\xc2\x41\x68\x45\x36\xcd\x79\xf1\xa4\x2c\x18\xf2\xc3\xab\x29\xab\xb2\xa2\xcc\x62\x64\xcd\xb3\xbf\x8d\xd6\xdd\xa7\x53\x86\x05\x43\x7e\x7f\x37\x4d\x55\x6d\x39\x9c\x4f\x8c\x11\xdb\x66\x4e\xa7\x31\x53\xcd\xcf\xf0\x43\x78\x2b\xbc\x15\x4e\x43\x4a\xea\x6a\x32\x71\xa7\xdb\xfb\xcd\x48\xd1\xc4\x04\x21\x1c\x5f\x16\xbf\x7b\x74\xfb\x3e\x42\xb4\x35\x10\xed\x08\xb3\xf6\xd0\x10\xb0\x25\x31\x11\xd4\x31\x1e\x89\xa0\x4e\x57\xa3\xb3\x44\x79\x66\x5f\xff\xa9\x35\xff\x1b\x00\x00\xff\xff\x34\xc4\xd2\xb2\xe9\x20\x00\x00")

func assetsTplCurdTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplCurdTpl,
		"assets/tpl/curd.tpl",
	)
}

func assetsTplCurdTpl() (*asset, error) {
	bytes, err := assetsTplCurdTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/curd.tpl", size: 8425, mode: os.FileMode(438), modTime: time.Unix(1592042968, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplCurd2Tpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x5d\x6b\xdb\x56\x18\xbe\x96\x40\xff\xe1\xad\x28\x41\x6a\x8d\x9c\xc1\xd8\x45\x86\x3a\x62\x5b\x59\xcd\x12\xa7\xb3\x9d\x8d\x51\xca\x90\xad\xe3\x4c\x54\x1f\xce\xd1\x51\x9c\x20\x0e\x74\xb0\x8b\x15\xd6\xae\x37\xcd\x4a\x57\x36\x5a\xba\x51\x06\x6d\x72\xb1\xb1\xde\xed\xcf\xc4\x5a\x7e\xc6\x38\x47\xb2\x2d\x7f\xc5\x72\xc8\xa0\x63\x81\x10\x72\xa4\xf3\xbc\xe7\x7d\xde\xe7\xfd\x38\x22\x87\x5d\x04\x51\xa4\x35\x08\x0e\xdb\xa4\x69\xb6\x1c\x54\x33\x5d\x44\xe9\x96\x6f\x21\x07\x02\xbe\x0c\x91\x24\x56\x4a\x70\x2d\xd8\x73\xb4\x4a\x49\x12\xa9\x24\x4a\x62\x27\xf4\xda\x50\x43\xbd\x59\x9b\x15\xab\x05\x9a\xa6\xa5\x1b\x54\xb8\x36\xdf\x42\x24\x89\x76\x07\x1c\xe4\x29\x56\x4b\x85\x1b\xb0\xca\x56\x00\x00\x30\x22\x21\xf6\x60\x65\xee\xd6\xf4\x3d\xf6\x53\x29\xad\x81\xd5\xba\xbd\x7a\xa7\x90\xac\x51\x7e\xc6\xbc\x08\x6c\xb7\x6b\x06\x04\xe1\x4a\xa9\xc0\x77\x72\x07\x8b\x45\x38\x7b\xf8\x67\xff\xfb\xa3\xf8\xfe\xbd\xf8\xd9\xfd\xbf\x9f\x7e\x73\xf6\xfc\x55\xff\xf5\x0f\xf1\x9b\x3f\x52\xef\x15\xf7\x1c\xcf\x54\xd8\x45\xa4\xec\x3b\xa1\xeb\x05\x8a\xca\x98\xb4\xbd\x5d\xe6\x9c\x90\x9e\x4b\x66\xbc\xaf\x3b\xce\x86\x8d\x1c\x6b\xd3\x0e\x08\xa5\x20\x4f\xda\xee\xbf\x7c\x7a\xf6\xfc\xbb\xf8\xf1\x49\xfc\xe0\x8d\x96\xdb\x6c\xdd\xef\x05\x4a\xb0\xe7\x34\x0f\x48\x6a\xb8\x00\x5d\x13\x9b\x6e\xc0\xc2\x62\x7b\x04\xe1\x8e\xd9\x46\x11\x55\x41\xc1\x7e\x2f\xa8\xa3\x20\x74\x08\xdc\xbe\xc3\x70\x6f\xdd\xdd\x35\x3c\x62\x93\x43\x4a\x67\x59\x29\x00\xc2\x98\xfd\xfa\x58\x65\xee\xec\x85\x08\x1f\x26\x8b\x6b\x3a\xb8\x5a\xa5\xa4\x7d\xca\x96\x52\xfb\x03\xc3\x9a\xa6\xa9\x3c\xd4\xec\xc5\x2b\x3a\x78\x36\x8f\x7d\xc2\x05\xf7\xda\x42\x1d\x84\x81\xc3\x69\x65\xc7\x0f\x90\xa2\x4a\x62\xc7\x1f\x2c\xd5\xd0\x01\x51\xb8\x45\xec\xf7\x98\xa9\xa9\xa3\xd6\x42\xc7\x99\x3a\x6e\x44\x25\x91\x99\xd4\x53\x98\x46\xdb\xf4\x14\x49\x8c\x22\x6c\x7a\xbb\x08\xf8\x26\x1e\x81\xa0\xea\x75\x7c\x4a\x57\xb0\xdf\xd3\xa2\x48\xbb\x19\xba\xdd\xd4\xe1\x62\x91\xd9\x2a\xfb\xae\x8b\x3c\x42\x29\xdb\x8c\x3c\x8b\xd2\xc4\x1f\xe6\xc8\x15\x9d\xbb\x15\x49\x62\xdb\xf7\x88\xed\x85\x28\x11\xe0\x88\x5a\x1d\xcc\x6e\x17\x79\x56\x86\xee\x02\x57\xe6\x02\xb6\xa3\x73\x8e\x1a\x45\x8c\xce\x3d\xd0\x3e\xf6\x9b\x2c\x8d\xe5\x8e\xe3\x9b\xe4\x83\xf7\x65\x0e\x35\x72\x60\x6d\xca\x25\x6d\x23\x79\xb3\x50\x2c\x4e\x79\xe6\x04\x08\x26\x70\x6d\x2f\x1f\x6a\xd5\xcb\x8f\x49\x6c\x17\x69\x4d\xdb\x45\x39\x70\xd9\x6b\x73\x60\x17\x6f\x6e\x24\xfa\x9f\x17\xc4\xf4\x0f\x0b\x26\x1d\x93\x63\x36\x09\x1f\x3c\x1e\x26\xe1\x32\x39\xc8\x53\x00\xe5\xcb\xc1\x54\x27\x17\x4d\xc0\xf1\xdc\xcb\xd8\x1e\xcf\xbf\x77\x2b\x75\xd2\x52\xc0\xba\x84\x81\x71\xcd\x67\x65\x6b\xa2\x28\x8c\x98\xd1\xdf\x81\x74\x81\xff\x53\xbe\x9c\x9b\x2e\x2c\x3f\x26\x93\xe5\xcb\xf8\xc7\xdf\xe3\xa3\x93\x65\xf2\xa4\x61\xee\xa3\xc9\x46\xb5\x6f\x3a\x21\x9a\xce\x91\x16\xb4\x7c\xdf\x99\x14\x7f\x40\x5c\x32\xde\x7c\x6e\x61\xd4\x35\xf1\x00\x35\x57\xcf\x61\x20\xa3\x96\x83\xd3\xea\x9c\x82\xf2\x87\xc6\x01\x6a\x2b\xfc\x60\x8b\xfb\xd8\xbe\x89\xc1\xec\x74\x50\x9b\x94\xfd\xd0\x23\xc0\xd5\x20\x89\x99\xa5\x04\x5b\x87\xc4\x92\xc6\x64\xbf\xce\x9f\x22\x4b\x59\x00\xde\x62\x9d\x24\x03\x7e\x03\x56\xa7\x03\x11\x1f\x9d\xf4\x5f\xfc\x74\xfa\xd7\xf3\xf8\xeb\xe3\x7c\x71\x28\x63\x64\x12\x94\x78\x98\xa7\x06\xa9\xa0\x38\x66\x40\xaa\x56\xe2\xdd\x64\x54\xda\xbe\x17\x10\x18\x54\x3f\x1d\xe4\x6a\xad\x61\xd4\x9b\x50\xad\x35\xb7\x41\x86\xeb\x69\x01\xe2\x80\xdc\xc0\x4e\xb7\x8b\x70\x06\x1f\xae\x83\x0c\x4a\x14\x69\x55\x2f\x40\x98\x64\x46\x24\x15\x3e\x5b\xdf\xdc\x31\x1a\x99\xa7\x5b\x26\xbe\x4b\xa9\x2a\x2f\x52\x03\xba\x5c\x39\x64\x4a\x4d\x72\x8e\xa4\xcc\x24\x2a\xb9\x40\x19\x9c\x3e\x4e\x42\xf1\x84\x5a\x36\xd9\x62\x62\x6f\xa1\x5a\xa6\x84\xb1\x74\x82\xee\x74\xad\x65\x85\x31\x3b\x51\x87\x6a\x58\xd3\x41\xde\xb9\x55\x59\x6f\x1a\xf9\x95\xd0\x30\x9a\xc0\x9f\xb1\xc3\x64\xe7\xe5\xcf\x6f\x1a\x75\x83\x63\x60\xdb\x35\xf1\xe1\x27\xe8\x90\x52\xd0\xe1\x23\x59\x12\xd3\x66\xcb\x94\x60\xde\x45\xca\xed\x3b\x99\x7a\x52\x80\x55\x75\x14\xbf\xab\x76\x01\xae\xee\x9b\x0e\x7b\x37\x35\xc2\xf0\xb9\x21\x4a\x53\x9c\xe1\x04\x97\xfc\x5f\x80\x28\x62\x7b\x78\x10\xd3\x70\x0e\xaf\x1c\xae\x36\x2c\x6c\x53\x2d\x78\x18\x8b\x9f\x7f\x39\x3b\x7e\x91\x9d\xef\xf3\x45\x64\xc3\xf6\xac\xa5\xe2\x81\x51\xc0\xbc\xb9\xd8\x74\x3f\x16\xb6\x86\xb1\x69\x94\x9b\x2c\x6a\xae\x36\x76\xb9\xb9\x0e\xf2\x46\x7d\x7b\x2b\x57\x40\x79\x46\xb1\x03\x0d\x74\xcd\xb1\x86\x37\x96\x24\x49\x2f\x6b\x0e\xdb\xb0\x71\x40\x96\x65\xeb\x82\x73\xd8\xe5\x53\xc5\xb5\xbf\x59\xdd\xaa\x36\xe1\x3d\x79\xbc\x12\x8d\x68\xcb\x59\xda\x66\x33\x1a\x3f\xbb\xd7\x7f\xf4\xf0\xf4\xed\xbd\x25\x79\x65\x45\xe8\xbf\x4d\xeb\x76\xbd\x62\xd4\xa1\xf4\x05\x54\x2b\x50\x31\x1a\xe5\x7f\x97\xe7\xfe\x83\xc7\xa7\x6f\x7f\x5b\x86\xe1\x6d\x0f\x29\x61\x80\xf0\xa0\xc5\x8e\x38\x9c\xd9\x71\x85\x69\x96\xc0\xb6\x60\x39\x4e\x7a\x5f\x21\x8c\xc0\xb6\x74\x56\x3e\x05\x76\x53\x3d\xe7\x5a\x91\x1c\x4e\x95\x44\x21\xa5\x43\x07\xb6\x23\xb9\x25\xac\x24\x67\x55\x3f\x9c\x20\x4a\x10\x06\xfc\x08\x74\xf8\x25\x64\x92\xac\x44\x8b\x39\x07\x17\x36\x05\x29\x2a\x28\xed\xd1\xac\x95\x43\x41\x50\xde\xde\xa9\x35\x95\x6b\x6a\x7e\x86\x16\x5d\xb4\xd4\x19\x97\xa5\x15\x7e\xaa\x25\x15\xd3\xff\xf6\x65\x7c\xf4\x3a\x7e\x72\xdc\x7f\xf4\x6b\xff\xf5\x93\xfe\xb3\x57\xf9\xa8\x30\x0e\xec\x80\x04\x8a\x3d\x12\xcc\xec\x4e\x3c\x4b\x2a\xcb\xd3\x31\x26\x98\xb4\xe3\x0a\x8b\xae\xa2\x36\xd7\x0b\x1b\x90\xdb\xd9\xd1\x58\x98\x4f\x9c\x30\xc5\xdc\x84\x84\xec\x4e\x8a\x95\x7e\x3a\x14\x04\x36\x22\x13\x1c\xa2\xf9\x6a\xfb\x27\x00\x00\xff\xff\x47\xe1\xde\x73\xf5\x14\x00\x00")

func assetsTplCurd2TplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplCurd2Tpl,
		"assets/tpl/curd2.tpl",
	)
}

func assetsTplCurd2Tpl() (*asset, error) {
	bytes, err := assetsTplCurd2TplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/curd2.tpl", size: 5365, mode: os.FileMode(438), modTime: time.Unix(1592035233, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplEntityTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\x41\x0a\xc2\x40\x0c\x45\xf7\x85\xde\x21\x8b\x2e\xa5\x07\x10\x5c\x09\x5d\x76\x21\xbd\xc0\x68\x83\x54\x67\x3a\x25\x4d\x29\x25\xe4\xee\x12\x75\xa4\x54\xc1\x59\x4d\x5e\xfe\x0f\x2f\xcf\x44\xca\xc6\x9d\x3d\x1e\x63\x08\xd8\xb3\x6a\x9e\xf1\x32\x20\x24\xae\x0a\x23\xd3\x74\x61\x10\x0b\x93\xeb\xaf\x08\xc5\x6d\x07\x45\xc7\x18\x60\x7f\x80\xb2\xea\xd0\xb7\xa3\xaa\xc8\x93\x95\xb5\x0b\x56\x7b\xbd\x04\x9b\x65\x78\xc3\x44\xaa\x48\xc1\x71\x2a\xc3\x26\x7f\xc2\xe0\xe8\x6e\x3a\x22\xd8\xb7\xf6\xd1\x2f\xdb\x7a\xf2\x7e\x6d\x6c\xf3\x1f\x6b\x8a\xf3\x56\x9a\xe2\xbc\x72\x4e\xc0\x4e\x7d\x9c\x61\xb5\xf9\x65\xf6\x08\x00\x00\xff\xff\x6e\x2e\x32\xff\x48\x01\x00\x00")

func assetsTplEntityTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplEntityTpl,
		"assets/tpl/entity.tpl",
	)
}

func assetsTplEntityTpl() (*asset, error) {
	bytes, err := assetsTplEntityTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/entity.tpl", size: 328, mode: os.FileMode(438), modTime: time.Unix(1591693953, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplExampleTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x6d\x6b\xdc\x46\x10\xfe\x2e\xd0\x7f\xd8\x0a\xee\x22\x99\x8b\xe4\xd4\x49\x09\x82\xa3\xed\xbd\x84\x06\x92\xd4\xc5\x2e\xfd\x50\x4a\xd8\x93\xf6\xee\x16\x4b\xbb\xba\xdd\x55\x1a\xd7\x18\x2e\x50\x9a\x84\x24\x76\x20\x4d\x02\xad\xd3\x77\xf7\x85\x42\xed\x0f\xa5\x31\x97\x94\xfe\x19\x4b\x67\xff\x8b\x32\x92\xee\xcd\x75\x8a\x69\x09\xe4\xdb\xec\xec\xcc\xce\xcc\xf3\x3c\xb3\x11\xf6\x56\x70\x87\xa0\x70\x55\xf6\x02\x5d\xd3\x35\x1a\x46\x5c\x28\x64\xea\x9a\xe1\x63\x85\x5b\x58\x12\x47\xf6\x02\x43\xd7\x8c\x76\xa8\x0c\x5d\xbb\x8a\x8c\x0e\x55\xdd\xb8\x65\x7b\x3c\x74\x3a\xfc\xb4\xec\x05\xa7\x7d\x41\xaf\x11\xe1\x64\xaf\x40\xa8\x22\x52\x51\xd6\x01\x53\x2a\x41\x59\x47\x82\xc9\x88\x72\x62\x01\x01\x16\x94\x52\xab\x11\x41\x8d\x5a\x9d\xb3\x36\xed\x34\x99\xa2\x6a\x15\x49\x25\x62\x4f\xa1\x35\x5d\x7b\x87\x4b\x85\x10\x42\x79\x3e\x72\x9c\x64\x6b\x37\x79\xd2\xd7\xb5\x45\xe8\x0f\x21\x44\x99\x42\x8e\x33\xfc\x75\x27\xd9\xfc\x5e\xd7\xae\xe0\x90\xcc\x84\x0f\x3f\xff\x39\xbd\xf5\x54\xd7\x16\xb1\x94\xb3\xef\xec\x7c\x36\xfc\xe6\x86\xae\x35\x6a\x79\xce\xe4\x62\xf0\x20\xb9\x7f\x4f\xd7\xea\x5d\x2c\x24\x51\x53\x4f\x3d\x7f\x94\x65\x2c\xd3\x90\x7c\xc2\x19\x99\xdc\xa4\x8f\xff\x48\xee\x0e\x74\xed\x32\xbe\x7e\xd1\x0f\x48\xd1\x53\xba\xd5\x4f\x7e\xf8\x69\xf8\xcb\xe0\xf0\xf1\xef\x07\x7f\x7d\x95\x6e\x6c\x67\x11\xef\x46\x84\xcd\x44\xe4\x77\xe9\xc3\x5d\x5d\x5b\x07\x40\x1c\x07\x8d\x5d\xe9\xbd\xdf\x92\xc1\x03\x5d\x6b\xc7\xcc\x43\x17\x19\x55\x8d\x9a\xe9\xb5\x3b\x47\xf0\xb2\xd0\x9c\xec\x05\x76\xa3\x06\x88\xd1\x76\xd1\x98\xb4\x9b\xbd\x18\x07\x17\x78\xe0\x43\x8e\x3d\xea\xbb\x82\x0c\xc3\x82\xc8\x69\x27\xaa\x22\xe3\xd4\xdb\x92\x62\x67\xa9\x8b\x59\xa7\x8b\xe9\x29\x23\xeb\xc7\x97\x0c\xb9\x55\xd4\x0e\x95\xbd\x14\x09\xca\x54\xdb\x34\x4a\xd2\x2d\xc9\xb7\x94\x17\x99\x60\xf9\x96\x53\x92\x6f\x7a\x39\x5c\xd5\x92\x2c\x47\x60\xc1\xc3\x55\x25\x62\x52\x0e\xb8\x57\xbd\xc4\x3d\x1c\x94\x15\x0d\xc9\x55\xa8\x56\x2d\x49\xa3\x92\x37\x00\xe8\x17\x26\x70\x54\x98\x40\xfb\xc8\xcb\xc5\xc8\xcc\xb9\x2a\x0e\x05\x3f\x15\x5d\x8b\x45\x60\xbf\x17\x13\xb1\xda\x94\x1e\x8e\xc8\xcc\xb0\x56\x25\x93\x99\xc7\x19\x23\x9e\xa2\x9c\x55\x10\x11\x02\x26\x02\xc4\x80\x0b\xd3\xc8\xf5\x5a\x41\xbe\x64\x56\x86\x1f\x44\xbc\x56\x45\x8c\x06\x00\x53\x84\x19\xf5\x4c\x22\x84\x95\x01\x32\x79\xca\x5e\x22\xaa\x20\xb4\xce\x19\x93\x59\xe1\xc2\x61\x1d\x13\x08\xda\x98\x09\x04\x87\xa5\x6b\x82\xa8\x58\x30\x34\x89\xcf\xea\x5c\xc3\x02\x35\x6a\x23\x66\xf3\xf3\xda\x5a\x86\xd7\xfa\x7a\xa3\x85\xe6\xc6\x87\xcb\xdc\x27\xd9\xd6\x66\x2a\xa1\x8c\xaa\xfa\xf8\x29\x73\xc4\x34\x8c\x3c\xab\x9a\x62\xbb\x5c\x23\x00\x72\xba\x5c\x2a\xe0\x04\xe0\x76\x17\x16\xe6\xcf\x57\xf2\x6d\x72\x0d\xc1\x79\x7e\x83\xa5\x74\x8d\x33\xaf\x2f\x9c\x3d\xf7\x06\x9c\x73\x36\x5c\x63\x85\x32\x3f\x20\x3e\xb8\x0a\x4e\x5c\x23\x56\xed\xf3\x61\xeb\x2c\xf8\x0a\x40\xdc\x33\xf3\x95\xf1\x86\xb8\xe8\x5c\x25\x1b\xb2\x51\x43\xd5\x29\x5d\x5b\xba\x36\x3d\x62\x15\x5d\x21\x1f\x8f\x1d\x66\xa3\x66\x4d\x56\x24\xfd\x7a\xfb\x60\xe7\xbb\xf4\x76\x3f\xdd\xba\x3d\xfc\xe2\xd3\x7c\x57\x0a\x08\x96\x89\x54\xe3\xb4\x0b\x94\xf9\x1f\x74\x89\x20\xa6\x42\x73\xc5\x8f\x64\x2f\x67\xb0\x1c\x85\x4a\xd7\x5a\x9c\xaf\x00\x52\xe3\xec\x35\x28\xa6\xb8\xcf\xb3\xca\x82\xc8\x38\x50\x63\x09\x4d\xf5\x6a\x43\x19\xb3\x0c\xf9\x16\x7c\x22\x37\xff\x4c\x1f\xee\x1e\xde\xbc\x7b\xb8\xd5\x3f\xf8\xf1\x46\x7a\xe7\x79\xba\xb1\xbd\xbf\xd7\xdf\xdf\xbb\x93\xfd\xb0\xff\x10\x99\xb2\x9b\x42\x70\x31\x91\x19\x2c\xdc\x22\xec\x5b\xc0\xcc\xbc\xec\x87\xf3\x1f\xe5\x57\xf0\x41\x6c\x3c\x4d\x36\x1f\xc1\xff\x71\x7f\x63\x7f\xaf\x9f\x3e\xf9\xf6\xc5\x00\x5c\xc2\x52\x9d\x64\xf6\x7f\x1d\x4e\x48\x65\x32\x1a\x1c\xb7\x1f\x27\x68\xfd\x68\xdf\xfd\x67\x19\x3a\x9b\xc7\xb5\x5b\xe7\x31\x7b\x65\xfa\x4d\x6e\x7d\x99\x3c\x1b\xbc\x18\xdb\xba\x20\x58\x9d\x48\x59\xbe\xff\xdf\x74\x55\x54\x28\xfb\xfe\x4b\x9a\xa5\x79\x1d\x87\x51\x40\xde\x8f\xfc\x97\x3c\x49\x51\xe1\xff\x4d\xf2\x77\x00\x00\x00\xff\xff\x0f\x0d\x50\xf5\xaa\x08\x00\x00")

func assetsTplExampleTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplExampleTpl,
		"assets/tpl/example.tpl",
	)
}

func assetsTplExampleTpl() (*asset, error) {
	bytes, err := assetsTplExampleTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/example.tpl", size: 2218, mode: os.FileMode(438), modTime: time.Unix(1590049353, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplInitTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\xdf\x6f\xeb\x34\x18\x7d\xb6\xff\x0a\x13\xa9\xbb\x09\xaa\x9a\xb5\xbb\xf7\x0a\x15\x45\x40\xdb\x8b\x40\x62\xfc\x50\x79\x47\x5e\xe2\xb4\x16\x89\x9d\xd9\xce\xc4\x98\x2a\x8d\x17\xc4\x03\x03\xa4\x01\x7b\x19\x08\x09\x10\x20\x24\xb6\x07\x04\x52\x85\xc4\x5f\xd3\x16\xfe\x0b\xf4\x39\x4e\x9b\x6c\xec\x29\xf6\xf9\x3e\x9f\x7c\xe7\xf8\x24\x3c\x2f\xa4\x32\xc4\xc7\xc8\x4b\xa8\xa1\x47\x54\xb3\x50\x1f\x67\x1e\x46\x5e\x9a\x1b\x78\x08\x66\xc2\x52\x59\x44\x1b\xc5\xc5\x4c\x7b\x38\xc0\xf8\x84\x2a\x38\x95\x53\x6d\x98\x9a\x8c\xc8\xf3\xfa\x38\xeb\x4d\x46\x18\xe9\x8c\x9e\xb0\x06\x10\x60\x9c\x96\x22\x26\x5c\x70\xe3\x07\xe4\x0c\xa3\x38\x9d\x91\x61\x44\x92\xa3\xb1\x14\x29\x9f\x9d\x61\x84\x5e\x93\xda\x0c\x09\x21\xc4\xcb\x64\x4c\xb3\xb9\xd4\xc6\xeb\x62\x84\xde\x96\xaa\xc2\x0f\x0e\xf6\x9f\x02\xf0\x26\xcd\x59\xd5\xa8\xa4\x74\x3d\x54\xeb\x0a\xea\x0f\x0e\x1e\x3f\x79\x6a\xc1\xc9\xc8\x75\x7a\xef\x73\x91\x64\x2c\xb1\xe8\x78\x4e\x95\x66\x66\x48\xbc\xd2\xa4\x2f\xe4\x47\x8f\x2d\x7a\x48\x3f\x78\xab\x60\x62\x48\xfa\xfb\xfb\x6e\xff\x7a\x92\xb1\x21\x79\x02\xdb\x45\x43\x64\x64\x55\x4c\x46\x7e\x9c\xce\x02\x8c\xc2\xb0\x16\xdb\x2e\x2c\x30\x36\xa7\x05\xdb\x2a\x24\xda\xa8\x32\x36\xa0\x1d\x84\xc2\xac\xa4\xf2\x92\x84\xe1\xea\xfa\x76\xf5\xcd\x39\xb6\x52\x6d\x85\x0b\xfb\x0c\xc3\xcd\xaf\x37\xab\xcf\xbf\xc7\x56\x73\xfb\xcc\xe6\xcb\x9f\xd7\x9f\xfc\x89\xad\xf4\x3b\x6c\x37\x1f\x6f\xbe\xfb\x08\x3b\xfd\xad\xca\xf2\x72\xf5\xc5\x05\xae\x3d\x68\xb2\xfd\xf5\xb5\x3d\xf3\x2e\xcf\xd9\x87\x52\xb0\x5d\x65\x7d\xf5\xc7\xea\xd3\x25\xae\x1d\x69\xcc\xb6\xbe\x3e\x5f\xfd\xf0\xd3\xe6\x97\xe5\xbf\x57\xbf\xff\xf3\xf7\xb7\xeb\xcf\x7e\xc4\xb5\x8f\xf7\xba\xaa\xfa\xfa\xab\x5b\x30\x26\x0c\xc9\x76\xbf\xbe\xf8\x6d\xb5\xbc\xdc\xc5\xa3\xf2\x6f\x6b\x5b\x50\x67\x08\x8c\xe3\xa9\x1b\x4b\xf7\x9e\x1d\x97\x34\x7b\x55\x66\x09\x74\xf7\xea\xa9\xbb\xc4\xf3\x6c\xbc\x50\x13\x25\x11\xf1\x1e\xbd\xa2\x39\x0d\xa7\x73\x2a\x66\x73\xca\x1f\x79\xf6\x4e\x13\x2d\x20\x84\x69\x6e\x7a\xd3\x42\x71\x61\x52\xdf\xeb\xe8\x61\x47\xbf\x6c\xe2\xc2\x87\x55\x12\x84\x1d\xfd\x52\x5c\xd9\x15\x75\xf4\x5e\x01\x2b\x20\x8e\x8c\x2a\xd9\x5e\x26\xe3\xe8\x0d\x48\xeb\x9e\xe1\x39\x7b\x0f\xde\x16\x75\xb4\x4d\x14\x4c\x00\xfe\xd7\x6b\xb8\xa7\x7a\x0d\x09\xd8\xe2\x52\x6d\xd7\xd5\x8d\xd5\x3b\x77\x4b\xb0\x2d\x55\xd6\x7b\xa7\x64\xea\xf4\x99\x8e\x69\xc1\x5a\xa2\x83\x2e\x46\x01\x46\x09\x4b\x99\x22\xe0\x63\xf5\x85\x81\x5b\x4c\x29\x10\xa8\x58\x2c\x4f\x98\xf2\x83\x17\x2d\xf2\x5c\x44\x04\xcf\x6c\x8f\x6b\xea\x43\xd7\xa1\x4b\xf8\x38\x93\x9a\xb9\xde\x7e\xab\x19\x15\x54\xf0\xd8\x07\x3c\x80\xfd\x62\xc7\x30\x00\x86\x69\xf5\x25\x34\x09\x06\x0f\x10\x0c\x76\x04\x5b\x0c\xa0\x05\x46\x0b\x3f\xc0\x28\x96\x42\xb0\xd8\x70\x29\xba\xb5\x0a\xc8\x01\x64\xcb\xf7\xf2\x53\xf8\x3d\x75\x49\xa2\x45\x80\x6b\x9d\x8d\xf7\x34\x19\x17\x4d\xae\xde\x94\x19\x97\xd0\xb1\x14\x42\x5b\x1f\x1d\x10\xfc\x4f\x23\x04\xbe\xd5\x08\x40\x80\x91\x62\xa6\x54\x82\xec\xfa\x21\xd5\x36\xc2\x77\x4c\x84\xc9\xa4\x72\xd9\xdd\xfe\x42\x1a\xa3\x3a\xa6\xba\xd4\x73\xe7\xec\xdc\xae\x26\x78\x86\x17\x15\x7b\xdb\xe0\x16\x79\xfd\x17\xba\xcf\xed\x2a\x0f\x52\xff\x17\x00\x00\xff\xff\xc2\xb5\x37\x26\xff\x05\x00\x00")

func assetsTplInitTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplInitTpl,
		"assets/tpl/init.tpl",
	)
}

func assetsTplInitTpl() (*asset, error) {
	bytes, err := assetsTplInitTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/init.tpl", size: 1535, mode: os.FileMode(438), modTime: time.Unix(1590049353, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplMarkdownTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\xc1\x6a\xea\x40\x14\x86\xf7\x81\xbc\xc3\x81\xb8\x50\xb8\xc9\x03\x08\xf7\x6e\xae\x1b\xb9\x17\xeb\x42\xba\x11\x17\xb1\x9e\x16\x69\x92\x96\x68\xa0\x61\x66\xc0\x45\xa1\x85\xd2\xd6\x45\xc1\xac\x0a\x05\x11\xbb\xa8\x52\xda\x82\x98\x3e\x8e\x19\xf5\x2d\x4a\x66\x9c\xd4\x56\x9a\xc5\x84\xf9\xff\xc3\xf9\x4f\xbe\x13\xc3\x80\xd5\xc3\x98\xf7\x62\x3e\x3a\xd7\x35\x5d\xa3\xc9\xfc\x36\xb9\x1c\xd0\x54\x4d\xfa\xd7\x40\x61\x35\x7d\xe5\xd1\x0d\x50\x48\x86\x17\xfc\x65\x0c\x54\xd7\x68\xd1\x34\x4d\x71\xa8\x13\xe4\x4b\xd7\x08\xf1\x6d\xef\x08\xc1\xaa\xd9\x4d\x07\xff\xb7\x3b\x5d\xc6\x28\x10\x62\x95\xbd\x16\x9e\x31\x46\xeb\xe9\x45\x98\x15\xdb\x45\xc6\x1a\x79\xe3\xd3\xfd\x6a\x15\x40\x3e\x94\x10\xeb\xef\x89\xeb\xa2\x27\x9a\x89\x14\xf4\x5a\x8c\xa5\x03\xab\xc0\xdc\x31\x86\xbf\x20\xd7\xee\xa2\x0b\xc5\xdf\x60\x95\xb0\x73\x20\xe3\x75\xcd\x30\x0c\x20\x44\x78\x2a\xc9\x52\xf7\xad\x3c\x5d\xfb\x93\x95\x65\x79\x69\x86\x29\x68\x3c\x0d\xf8\xe4\x4d\xd2\x90\xa4\x84\x00\x14\x96\xcf\x71\x72\x7f\x05\x14\x78\x34\x4d\xfa\xa3\xc5\x6c\xbe\x7c\x9c\x53\x58\xc7\xd1\x6a\x32\x4c\x7a\xef\x99\xc3\xa3\xe9\x62\x16\xaf\xef\x26\xbb\x58\x15\x55\x73\x97\xed\x37\x61\x0b\xb2\x1c\x75\x03\x59\x40\x72\x02\xd7\x93\x1f\x03\x20\xb0\x4b\xa9\x16\x9e\x62\x25\x70\x9b\xe8\x33\x26\xf5\x72\xa7\x12\x38\xce\x66\x37\x25\x3c\xb4\x03\xa7\xbb\x6f\x3b\x01\xaa\x82\xaa\xdf\x76\x6d\x3f\xfc\x87\xa1\x52\x64\xab\x1f\x16\x51\xaf\xed\x55\x1b\x79\x23\xfb\x97\x0a\x99\xf7\x11\x00\x00\xff\xff\x54\x04\xaf\xad\x62\x02\x00\x00")

func assetsTplMarkdownTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplMarkdownTpl,
		"assets/tpl/markdown.tpl",
	)
}

func assetsTplMarkdownTpl() (*asset, error) {
	bytes, err := assetsTplMarkdownTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/markdown.tpl", size: 610, mode: os.FileMode(438), modTime: time.Unix(1582012295, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplTablesTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\xe5\x4a\xce\xcf\x2b\x2e\x51\xd0\xe0\xe5\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x50\xc9\x2c\x49\xcd\x55\xb0\xb2\x55\xd0\xab\xad\x05\xc9\x80\xf9\x7a\xa1\x05\x05\xa9\x45\x21\x89\x49\x39\xa9\x7e\x89\xb9\xa9\xb5\xb5\x0a\x0a\x0a\x0a\xb6\x0a\x4a\x30\x69\x24\x19\x25\x05\x7d\x7d\x05\x98\xb8\x73\x7e\x6e\x6e\x6a\x5e\x49\x6d\x6d\x75\x75\x6a\x5e\x0a\xc8\x40\x4d\x40\x00\x00\x00\xff\xff\xf6\x4d\x87\xcf\x77\x00\x00\x00")

func assetsTplTablesTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplTablesTpl,
		"assets/tpl/tables.tpl",
	)
}

func assetsTplTablesTpl() (*asset, error) {
	bytes, err := assetsTplTablesTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/tables.tpl", size: 119, mode: os.FileMode(438), modTime: time.Unix(1590049353, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/tpl/curd.tpl":     assetsTplCurdTpl,
	"assets/tpl/curd2.tpl":    assetsTplCurd2Tpl,
	"assets/tpl/entity.tpl":   assetsTplEntityTpl,
	"assets/tpl/example.tpl":  assetsTplExampleTpl,
	"assets/tpl/init.tpl":     assetsTplInitTpl,
	"assets/tpl/markdown.tpl": assetsTplMarkdownTpl,
	"assets/tpl/tables.tpl":   assetsTplTablesTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"tpl": &bintree{nil, map[string]*bintree{
			"curd.tpl":     &bintree{assetsTplCurdTpl, map[string]*bintree{}},
			"curd2.tpl":    &bintree{assetsTplCurd2Tpl, map[string]*bintree{}},
			"entity.tpl":   &bintree{assetsTplEntityTpl, map[string]*bintree{}},
			"example.tpl":  &bintree{assetsTplExampleTpl, map[string]*bintree{}},
			"init.tpl":     &bintree{assetsTplInitTpl, map[string]*bintree{}},
			"markdown.tpl": &bintree{assetsTplMarkdownTpl, map[string]*bintree{}},
			"tables.tpl":   &bintree{assetsTplTablesTpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
